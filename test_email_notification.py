#!/usr/bin/env python3
"""
Script test email notification
Ch·∫°y script n√†y ƒë·ªÉ ki·ªÉm tra xem email notification c√≥ ho·∫°t ƒë·ªông kh√¥ng
"""

import os
import sys
import tempfile
import shutil
from datetime import datetime

# Th√™m project root v√†o Python path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

from utils.email_notification import send_email_with_attachment, send_simple_notification

def create_test_allure_results():
    """T·∫°o th∆∞ m·ª•c allure-results test v·ªõi m·ªôt s·ªë file m·∫´u"""
    # T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
    temp_dir = tempfile.mkdtemp(prefix="test_allure_")
    allure_dir = os.path.join(temp_dir, "allure-results")
    os.makedirs(allure_dir, exist_ok=True)
    
    # T·∫°o m·ªôt s·ªë file m·∫´u
    test_files = [
        "environment.properties",
        "test_result.json",
        "screenshot.png"
    ]
    
    for filename in test_files:
        file_path = os.path.join(allure_dir, filename)
        with open(file_path, 'w') as f:
            if filename == "environment.properties":
                f.write("os=Windows 10\nbrowser=Chrome\npython_version=3.9.0\n")
            elif filename == "test_result.json":
                f.write('{"test_name": "test_example", "status": "passed"}\n')
            else:
                f.write("fake screenshot content\n")
    
    print(f"Created test allure results at: {allure_dir}")
    return allure_dir

def test_email_with_attachment():
    """Test g·ª≠i email v·ªõi file ƒë√≠nh k√®m"""
    print("\n=== Testing Email with Attachment ===")
    
    # T·∫°o test data
    allure_dir = create_test_allure_results()
    test_summary = {
        "Total Tests": 5,
        "Passed": 4,
        "Failed": 1,
        "Exit Status": 1
    }
    
    try:
        success = send_email_with_attachment(allure_dir, test_summary)
        if success:
            print("‚úÖ Email with attachment sent successfully!")
        else:
            print("‚ùå Failed to send email with attachment")
        return success
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    finally:
        # Cleanup
        shutil.rmtree(os.path.dirname(allure_dir), ignore_errors=True)

def test_simple_notification():
    """Test g·ª≠i th√¥ng b√°o ƒë∆°n gi·∫£n"""
    print("\n=== Testing Simple Notification ===")
    
    allure_dir = create_test_allure_results()
    
    try:
        success = send_simple_notification(allure_dir)
        if success:
            print("‚úÖ Simple notification sent successfully!")
        else:
            print("‚ùå Failed to send simple notification")
        return success
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    finally:
        # Cleanup
        shutil.rmtree(os.path.dirname(allure_dir), ignore_errors=True)

def main():
    """Main function ƒë·ªÉ test email notification"""
    print("üß™ Testing Email Notification System")
    print("=" * 50)
    
    # Ki·ªÉm tra c·∫•u h√¨nh email
    try:
        from configs.email_config import SENDER_EMAIL, RECEIVER_EMAIL, PASSWORD
        print(f"üìß Sender: {SENDER_EMAIL}")
        print(f"üìß Receiver: {RECEIVER_EMAIL}")
        print(f"üîë Password: {'*' * len(PASSWORD) if PASSWORD != 'your_email_password' else 'NOT SET'}")
        
        if PASSWORD == 'your_email_password':
            print("‚ö†Ô∏è  WARNING: Please update your email password in configs/email_config.py")
            print("   For Gmail, use App Password if 2FA is enabled")
            return
        
    except ImportError as e:
        print(f"‚ùå Error importing email config: {e}")
        return
    
    # Test email v·ªõi attachment
    attachment_success = test_email_with_attachment()
    
    # Test simple notification
    simple_success = test_simple_notification()
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä Test Summary:")
    print(f"   Email with Attachment: {'‚úÖ PASS' if attachment_success else '‚ùå FAIL'}")
    print(f"   Simple Notification: {'‚úÖ PASS' if simple_success else '‚ùå FAIL'}")
    
    if attachment_success or simple_success:
        print("\nüéâ Email notification system is working!")
    else:
        print("\nüí• Email notification system failed!")
        print("   Please check your email configuration and credentials")

if __name__ == "__main__":
    main()
